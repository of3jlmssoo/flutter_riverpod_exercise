


void main()
  ProviderScope(
    child: MyApp(),
  ),
  // All Flutter applications using Riverpod must contain a ProviderScope at the root of their widget tree. It is done as followed:

MyApp(stateless)からの_MainScreenState
MaterialApp(
  home: AccountScreen()
)

class AccountScreen extends HookConsumerWidget {
  // HookConsumerWidget class abstract
  // A widget that can both use hooks and listen to providers.
  // If you do not need hooks, you can use Consumer.
  changed to
class AccountScreen extends ConsumerWidget {  

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    List<EntryItem> entries = ref.watch(filteredTodos);

  return Scaffold
    appBar
    body Center
          Column
            Container MyInputItem()
            ListView
              children: [
                  for (var i = 0; i < entries.length; i++) ...[
                    ProviderScope(
                      overrides: [
                        _currentTodo.overrideWithValue(entries[i]),
                      ],
                      child: const TodoItem(),
                    ),
                  ],
                ],

  1) check MyInputItem()
  2) ProviderScope is used again

class MyInputItem extends HookConsumerWidget {
  // Hook is required because of useTextEditingController
  
## ref.watch
final filter = ref.watch(todoListFilter);
final todos = ref.watch(listProvider);
return ref.watch(EntryItemNotifier as AlwaysAliveProviderListenable).length;
List<EntryItem> entries = ref.watch(filteredTodos);
final filter = ref.watch(todoListFilter);
List<EntryItem> entries = ref.watch(filteredTodos);
final todo = ref.watch(_currentTodo);

## ref.watch対象
todoListFilter x2
listProvider
EntryItemNotifier as AlwaysAliveProviderListenable
filteredTodos x2
_currentTodo

## ref.watch対象定義
1. StateProvider
2. StateNotifier    <= ChangeNotifierとStateNotifierは使われなくなる方向
3. StateNotifierProvider
4. Provider

final todoListFilter = StateProvider((_) => TodoListFilter.all);

class EntryItemNotifier extends StateNotifier<List<EntryItem>> {

final listProvider = StateNotifierProvider<EntryItemNotifier, List<EntryItem>>(

final filteredTodos = Provider<List<EntryItem>>(
final _currentTodo = Provider<EntryItem>(     実質１行
